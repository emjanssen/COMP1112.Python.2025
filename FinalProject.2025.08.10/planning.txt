Intro/problem statement: 
I worked as an admin assistant for six years.
At one of those jobs, I manually maintained an excel file with details for the 170-ish people on our program team.
Purpose of this assignment: automate data entry into a similar excel file.
Premise: every time someone joins the team, they email the admin a word doc with their details, based on a specific template provided by the admin.
This wouldn't be official documentation from HR; it'd be something program-specific, with details relevant to the admin (for catering, events, mailing lists, etc).

Template would be provided as an Excel file, and admin would ask team member to complete the excel file and return it.
Application will have code that can read the table data from the following mediums:
- Excel file
- Word doc
- Email in outlook
So it covers people who return the Excel file, people who copy the table into an email instead, and people who return it as a word doc instead.
It will input the user data to a workbook, and output a couple specific reports/lists (like a list of food allergies).
Four code sections:
1. Create initial workbook
2. Read data from Excel File | read data from email
3. Input data into workbook
4. Output curated lists

Modules Required: os, openpyxl, docx, subprocess
Reference:

https://automatetheboringstuff.com/3e/chapter14.html
https://openpyxl.readthedocs.io/en/stable/
https://www.geeksforgeeks.org/python/creating-the-workbook-and-worksheet-using-openpyxl-in-python/

// - - - - - Directory - - - - - //

1. Create directory
reference code (from lecture 7):

import os
if (os.path.exists("C:\\example\\subfolder\\test")==False):
os.makedirs("C:\\example\\subfolder\\test")
else:
// open existing file (or create file)

// - - - - - Initial Workbook - - - - - //

2. Create workbook

from openpyxl import Workbook
# Create a workbook
wb = Workbook()

3. Get active sheet

# Get active worksheet
ws = wb.active

4. Rename active sheet

ws.title = "MySheet"

5. Append a new row with column headings

append(iterable)
Appends a group of values at the bottom of the current sheet.
append([‘This is A1’, ‘This is B1’, ‘This is C1’]) 

Data fields (i.e. eleven columns):

First Name	
Last Name	
Company	
Department (if you are an internal staff member)	
Supervisor	
Start date	
End date (if applicable) 	
Email	
Landline	
Mobile	
Allergies

6. Save workbook

# Save the workbook to a file
wb.save("myworkbook.xlsx")

7. Close workbook

// - - - Read From Word Doc - - - //

8. Open workbook

import openpyxl
wb = openpyxl.load_workbook('example3.xlsx')
type(wb)

9. Open doc file submitted by team member
uses windows default app for .docx (which is normally word)
don't have to know where word is installed

import subprocess

wordFilePath = r"C:\path\to\your\demo.docx"
subprocess.Popen(["start", "", wordFilePath], shell=True)

9. Get full text from doc

for reading from paragraphs (probably not going to use, but keeping for reference):
import docx 
doc = docx.Document("demo.docx")
fullText = []
for words in doc.paragraphs:
    fullText.append(words.text)

from reading from the second column of a table:
doc = docx.Document(docx_path)
col2_text = []
for table in doc.tables:
for row in table.rows:
if len(row.cells) >= 2:  # make sure there is a second column
col2_text.append(row.cells[1].text.strip())  # index 1 = second column
return col2_text

example return text text:

Frodo
Baggins
The Green Dragon
Snack Delivery
Gandalf Mithrandir
January 11, 2024
February 17, 2025
f_baggins@email.com
1-345-234-6789
1-453-567-2345
Gluten, dairy

/* Read Excel File */

/* Read From Outlook Email */